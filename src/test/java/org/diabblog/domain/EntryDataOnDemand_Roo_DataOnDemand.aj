// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.diabblog.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.diabblog.domain.Entry;
import org.diabblog.domain.EntryDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect EntryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EntryDataOnDemand: @Component;
    
    private Random EntryDataOnDemand.rnd = new SecureRandom();
    
    private List<Entry> EntryDataOnDemand.data;
    
    public Entry EntryDataOnDemand.getNewTransientEntry(int index) {
        Entry obj = new Entry();
        setBloodSugarLevel(obj, index);
        setCarbs(obj, index);
        setComments(obj, index);
        setCorrection(obj, index);
        setCreated(obj, index);
        setFastInsulin(obj, index);
        setSlowInsulin(obj, index);
        return obj;
    }
    
    public void EntryDataOnDemand.setBloodSugarLevel(Entry obj, int index) {
        Float bloodSugarLevel = new Integer(index).floatValue();
        if (bloodSugarLevel < 0.0F || bloodSugarLevel > 99.9F) {
            bloodSugarLevel = 99.9F;
        }
        obj.setBloodSugarLevel(bloodSugarLevel);
    }
    
    public void EntryDataOnDemand.setCarbs(Entry obj, int index) {
        String carbs = "carbs_" + index;
        obj.setCarbs(carbs);
    }
    
    public void EntryDataOnDemand.setComments(Entry obj, int index) {
        String comments = "comments_" + index;
        obj.setComments(comments);
    }
    
    public void EntryDataOnDemand.setCorrection(Entry obj, int index) {
        String correction = "correction_" + index;
        obj.setCorrection(correction);
    }
    
    public void EntryDataOnDemand.setCreated(Entry obj, int index) {
        Date created = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreated(created);
    }
    
    public void EntryDataOnDemand.setFastInsulin(Entry obj, int index) {
        Float fastInsulin = new Integer(index).floatValue();
        if (fastInsulin < 0.0F || fastInsulin > 99.9F) {
            fastInsulin = 99.9F;
        }
        obj.setFastInsulin(fastInsulin);
    }
    
    public void EntryDataOnDemand.setSlowInsulin(Entry obj, int index) {
        Float slowInsulin = new Integer(index).floatValue();
        if (slowInsulin < 0.0F || slowInsulin > 99.9F) {
            slowInsulin = 99.9F;
        }
        obj.setSlowInsulin(slowInsulin);
    }
    
    public Entry EntryDataOnDemand.getSpecificEntry(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Entry obj = data.get(index);
        Long id = obj.getId();
        return Entry.findEntry(id);
    }
    
    public Entry EntryDataOnDemand.getRandomEntry() {
        init();
        Entry obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Entry.findEntry(id);
    }
    
    public boolean EntryDataOnDemand.modifyEntry(Entry obj) {
        return false;
    }
    
    public void EntryDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Entry.findEntryEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Entry' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Entry>();
        for (int i = 0; i < 10; i++) {
            Entry obj = getNewTransientEntry(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
